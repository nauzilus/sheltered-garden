{"version":3,"sources":["webpack:///./src/components/QuoteChart.js","webpack:///./src/components/CurrencyDailyPerformance.js","webpack:///./src/components/BestDailyPerformance.js","webpack:///./src/App.js","webpack:///./src/index.js"],"names":["project","src_x","src_y","dst_x","dst_y","value","toMinutes","time","Math","floor","QuoteChart","_ref","quotes","buy","sell","data","map","_ref2","price","prices","x","sort","_ref3","slice","min","max","buyTime","sellTime","paths","filter","_ref4","round","height","join","react_default","a","createElement","viewBox","path","i","key","d","style","fill","stroke","strokeWidth","dateFns","DateFnsUtils","fmtCurrency","currency","money","str","Number","toLocaleString","h","substr","length","m","date","Date","setHours","setMinutes","format","Grid_default","item","Typography_default","CurrencyDailyPerformance","name","gain","Card_default","CardHeader_default","title","subheader","titleTypographyProps","align","subheaderTypographyProps","CardContent_default","textAlign","container","alignItems","xs","direction","CurrencyDailyPerformance_ref3","components_QuoteChart","component","variant","color","gutterBottom","LinearProgress_default","Icon_default","BestDailyPerformance","_Component","_temp","_this","_classCallCheck","this","_len","arguments","args","Array","_key","_possibleConstructorReturn","call","apply","concat","state","handleDateChange","setState","getBests","previousDay","shiftDay","nextDay","today","debounce","formattedDate","params","notify","axios","get","API_BASE","then","rsp","error","_inherits","prototype","componentDidUpdate","prev","props","handleIncomingDate","componentDidMount","_asyncToGenerator","regenerator_default","mark","_callee","_this2","wrap","_context","next","currencies","reduce","lookup","stop","_date","test","parse","onDateChange","dir","addDays","render","react","BestDailyPerformance_ref3","content","_state","_ref5","items","quote","_extends","spacing","Button_default","onClick","_ref6","material_ui_pickers_esm","utils","onChange","_ref7","sm","components_CurrencyDailyPerformance","_ref8","Component","history","createHashHistory","CssBaseline_default","withStyles","theme","_layout","@global","body","backgroundColor","palette","common","white","layout","width","marginLeft","unit","marginRight","breakpoints","up","_ref$classes","classes","undefined","App_ref2","HashRouter","className","Switch","Route","match","components_BestDailyPerformance","push","Redirect","to","pathname","src_App","document","querySelector"],"mappings":"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","file":"app.162f24d9.js","sourcesContent":["import React, { Component } from 'react';\n\n// lerp?\nconst project = (src_x, src_y, dst_x, dst_y, value) => {\n  return ((value - src_x) / (src_y - src_x)) * (dst_y - dst_x) + dst_x;\n};\nconst toMinutes = time => {\n  return 60 * Math.floor(time / 100) + (time % 100);\n};\n\nconst QuoteChart = ({ quotes, buy, sell }) => {\n  const data = quotes.map(({ time, price }) => ({\n    price: +price,\n    time: toMinutes(time)\n  }));\n  const prices = data.map(x => x.price).sort();\n  const [min, max] = [prices[0], prices.slice(-1)[0]];\n\n  const width = 100;\n  const height = 20;\n  const buyTime = toMinutes(buy.time);\n  const sellTime = toMinutes(sell.time);\n  const best = data.filter(x => x.time >= buyTime && x.time <= sellTime);\n\n  const paths = [data, best].map(data => {\n    const coords = data\n      .map(({ time, price }) => {\n        const x = Math.round(project(0, 1440, 0, width, time));\n        const y = Math.round(project(min, max, height - 1, 1, price));\n        return `${x} ${y}`;\n      })\n      .join(' L ');\n\n    return `M ${coords}`;\n  });\n\n  return (\n    <svg viewBox={`0 0 ${width} ${height}`}>\n      {paths.map((path, i) => (\n        <path\n          key={i}\n          d={path}\n          style={{\n            fill: 'none',\n            stroke: i === 1 ? 'crimson' : 'slategray',\n            strokeWidth: i === 1 ? 1 : 0.5\n          }}\n        />\n      ))}\n    </svg>\n  );\n};\n\nexport default QuoteChart;\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport DateFnsUtils from '@date-io/date-fns';\nimport QuoteChart from './QuoteChart';\n\nconst dateFns = new DateFnsUtils();\nconst fmtCurrency = { style: 'currency', currency: 'AUD' };\nconst locale = 'en-AU';\nconst money = str => Number(str).toLocaleString(locale, fmtCurrency);\nconst time = str => {\n  const h = str.substr(0, str.length - 2);\n  const m = str.substr(-2);\n  const date = new Date();\n  date.setHours(h);\n  date.setMinutes(m);\n  return dateFns.format(date, 'HH:mm');\n};\n\nexport const CurrencyDailyPerformance = ({ item }) => {\n  const { currency, quotes, name, gain, buy, sell } = item;\n\n  return (\n    <Card>\n      <CardHeader\n        title={currency}\n        subheader={name}\n        titleTypographyProps={{ align: 'center' }}\n        subheaderTypographyProps={{ align: 'center' }}\n      />\n      <CardContent>\n        <Grid style={{ textAlign: 'center' }} container alignItems=\"stretch\">\n          <Grid item xs={6}>\n            <Grid container direction=\"column\">\n              <Grid item>\n                <Typography>Buy</Typography>\n              </Grid>\n              <Grid item>\n                <Typography>{money(buy.price)}</Typography>\n              </Grid>\n              <Grid item>\n                <Typography>{time(buy.time)}</Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={6}>\n            <Grid container direction=\"column\">\n              <Grid item>\n                <Typography>Sell</Typography>\n              </Grid>\n              <Grid item>\n                <Typography>{money(sell.price)}</Typography>\n              </Grid>\n              <Grid item>\n                <Typography>{time(sell.time)}</Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography>Profit: {money(gain)}</Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <QuoteChart quotes={quotes} buy={buy} sell={sell} />\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default CurrencyDailyPerformance;\n","import React, { Component, Fragment } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport CurrencyDailyPerformance from './CurrencyDailyPerformance';\nimport { MuiPickersUtilsProvider } from 'material-ui-pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { DatePicker } from 'material-ui-pickers';\nimport debounce from 'lodash/debounce';\n\nimport axios from 'axios';\n\nconst dateFns = new DateFnsUtils();\n\nexport class BestDailyPerformance extends Component {\n  state = {\n    date: new Date()\n  };\n\n  componentDidUpdate(prev) {\n    if (prev.date !== this.props.date) {\n      this.handleIncomingDate(this.props.date);\n    }\n  }\n\n  async componentDidMount() {\n    const { date } = this.props;\n\n    axios\n      .get(`${API_BASE}/currencies`)\n      .then(rsp => rsp.data)\n      .then(currencies => {\n        return currencies.reduce((lookup, { currency, name }) => {\n          lookup[currency] = name;\n          return lookup;\n        }, {});\n      })\n      .then(\n        currencies => this.setState({ currencies }),\n        error => this.setState({ error })\n      );\n\n    this.handleIncomingDate(this.props.date);\n  }\n\n  handleIncomingDate(_date) {\n    const date =\n      _date && /^\\d{8}$/.test(_date)\n        ? dateFns.parse(_date, 'yyyyMMdd')\n        : new Date();\n\n    this.setState({ date }, this.getBests);\n  }\n\n  notify(date) {\n    if (this.props.onDateChange) {\n      this.props.onDateChange(date);\n    }\n  }\n\n  handleDateChange = date => {\n    this.setState({ date }, this.getBests);\n  };\n\n  previousDay = () => this.shiftDay(-1);\n  nextDay = () => this.shiftDay(1);\n  today = () => this.handleDateChange(new Date());\n\n  shiftDay(dir) {\n    this.setState(\n      state => ({\n        date: dateFns.addDays(state.date, dir)\n      }),\n      this.getBests\n    );\n  }\n\n  getBests = debounce(() => {\n    const { date } = this.state;\n    const formattedDate = dateFns.format(date, 'yyyyMMdd');\n    const params = {\n      date: formattedDate\n    };\n\n    this.notify(formattedDate);\n\n    axios\n      .get(`${API_BASE}/best`, { params })\n      .then(rsp => rsp.data)\n      .then(\n        quotes => this.setState({ quotes }),\n        error => this.setState({ error })\n      );\n  }, 300);\n\n  render() {\n    return (\n      <Fragment>\n        <Typography\n          component=\"h1\"\n          variant=\"h2\"\n          align=\"center\"\n          color=\"textPrimary\"\n          gutterBottom\n        >\n          Best Daily Trade\n        </Typography>\n        <Typography\n          variant=\"h6\"\n          align=\"center\"\n          color=\"textSecondary\"\n          component=\"p\"\n        >\n          Hind-sight is 20/20, and what better way to find out how well you\n          could play the crypto-markets than to look back in time to find out\n          the best trades you could have made for a given day.\n        </Typography>\n\n        {this.content()}\n      </Fragment>\n    );\n  }\n\n  content() {\n    const { date, error, currencies, quotes } = this.state;\n\n    if (error) {\n      return (\n        <Card>\n          <CardContent>\n            <Typography variant=\"h5\">{error}</Typography>\n          </CardContent>\n        </Card>\n      );\n    }\n\n    if (!(currencies && quotes)) {\n      return <LinearProgress />;\n    }\n\n    const items = quotes.map(quote => ({\n      ...quote,\n      name: currencies[quote.currency]\n    }));\n\n    return (\n      <Grid container spacing={40} alignItems=\"flex-end\">\n        <Grid item xs={12} style={{ textAlign: 'center' }}>\n          <Button color=\"primary\" onClick={this.previousDay}>\n            <Icon>navigate_before</Icon>\n          </Button>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <DatePicker value={date} onChange={this.handleDateChange} />\n          </MuiPickersUtilsProvider>\n          <Button color=\"primary\" onClick={this.nextDay}>\n            <Icon>navigate_next</Icon>\n          </Button>\n          <Button color=\"primary\" onClick={this.today}>\n            Today\n          </Button>\n        </Grid>\n        {items.length ? (\n          items.map(item => (\n            <Grid item key={item.currency} xs={12} sm={4}>\n              <CurrencyDailyPerformance item={item} />\n            </Grid>\n          ))\n        ) : (\n          <Card>\n            <CardContent>\n              <Typography>No quotes available for this date.</Typography>\n            </CardContent>\n          </Card>\n        )}\n      </Grid>\n    );\n  }\n}\n\nexport default BestDailyPerformance;\n","import React, { Fragment } from 'react';\nimport { HashRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport { createHashHistory } from 'history';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { withStyles } from '@material-ui/core/styles';\nimport BestDailyPerformance from './components/BestDailyPerformance';\n\nconst history = createHashHistory();\n\nconst styles = theme => ({\n  '@global': {\n    body: {\n      backgroundColor: theme.palette.common.white\n    }\n  },\n  layout: {\n    width: 'auto',\n    marginLeft: theme.spacing.unit * 3,\n    marginRight: theme.spacing.unit * 3,\n    [theme.breakpoints.up(900 + theme.spacing.unit * 3 * 2)]: {\n      width: 900,\n      marginLeft: 'auto',\n      marginRight: 'auto'\n    }\n  }\n});\n\nconst App = ({ classes = {} }) => {\n  return (\n    <Fragment>\n      <CssBaseline />\n      <Router>\n        <main className={classes.layout}>\n          <Switch>\n            <Route\n              path=\"/best/:date?\"\n              render={({ match }) => (\n                <BestDailyPerformance date={match.params.date} onDateChange={date => {\n                  history.push(`/best/${date}`);\n                }}/>\n              )}\n            />\n            <Redirect\n              to={{\n                pathname: '/best'\n              }}\n            />\n          </Switch>\n        </main>\n      </Router>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(App);\n","import React from 'react'\nimport {render} from 'react-dom'\n\nimport App from './App'\n\nrender(<App/>, document.querySelector('#app'))\n"],"sourceRoot":""}